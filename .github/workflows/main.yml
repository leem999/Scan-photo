name: Android CI

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
     - name: Build (debug) with verbose log
        run: |
            set -e
            echo "===== Dump AndroidManifest.xml (head) ====="
            sed -n '1,80p' app/src/main/AndroidManifest.xml || true
            echo "==========================================="
            ./gradlew clean assembleDebug --stacktrace --console=plain | tee build.log

      - name: Checkout
        uses: actions/checkout@v4

      # 1) 自动定位 Gradle 项目目录（含 settings.gradle 的目录）
      - name: Locate project dir
        id: detect
        shell: bash
        run: |
          set -euxo pipefail
          W="."
          if [ -f settings.gradle ] || [ -f settings.gradle.kts ]; then
            W="."
          elif [ -d Scan-photo ] && [ -f Scan-photo/settings.gradle ]; then
            W="Scan-photo"
          else
            cand="$(git ls-files | grep -E 'settings\.gradle(\.kts)?$' | head -n1 || true)"
            if [ -n "$cand" ]; then W="$(dirname "$cand")"; fi
          fi
          echo "workdir=$W" >> "$GITHUB_OUTPUT"
          echo "Using workdir=$W"
          : > "$GITHUB_WORKSPACE/build.log"
          (cd "$W" && pwd && ls -la)

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components
        run: |
          sdkmanager --install "platforms;android-35" "build-tools;35.0.0" "platform-tools"
          yes | sdkmanager --licenses

      - name: Setup Gradle (with cache)
        uses: gradle/actions/setup-gradle@v3

      # 2) 若缺少 gradlew，则临时下载 gradle 8.8 来生成 wrapper
      - name: Generate Gradle wrapper if missing
        working-directory: ${{ steps.detect.outputs.workdir }}
        shell: bash
        run: |
          if [ ! -x "./gradlew" ]; then
            curl -L -o gradle.zip https://services.gradle.org/distributions/gradle-8.8-bin.zip
            unzip -q gradle.zip
            ./gradle-8.8/bin/gradle wrapper --gradle-version 8.8
          fi
          chmod +x ./gradlew

      - name: Show Gradle info
        working-directory: ${{ steps.detect.outputs.workdir }}
        run: |
          ./gradlew -v 2>&1 | tee -a "$GITHUB_WORKSPACE/build.log"
          ./gradlew projects 2>&1 | tee -a "$GITHUB_WORKSPACE/build.log" || true

      # 3) 真正构建；即使失败也继续，以便我们上传日志/产物
      - name: Build debug APK
        id: build
        continue-on-error: true
        working-directory: ${{ steps.detect.outputs.workdir }}
        run: |
          set -o pipefail
          ./gradlew clean assembleDebug --no-daemon --stacktrace 2>&1 | tee -a "$GITHUB_WORKSPACE/build.log"

      # 4) 总是上传日志
      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: ${{ github.workspace }}/build.log

      # 5) 如有 APK 就上传，没有也忽略，不再报错
      - name: Upload APK (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug
          path: ${{ steps.detect.outputs.workdir }}/app/build/outputs/apk/debug/*.apk
          if-no-files-found: ignore

      # 6) 如果构建步骤失败，则让整个任务失败（但日志已上传）
      - name: Fail job if build failed
        if: ${{ steps.build.outcome == 'failure' }}
        run: exit 1
